[
    {
      "id": 1,
      "title": "Two Sum",
      "description": "Given an array of integers, return indices of the two numbers such that they add up to a specific target.",
      "difficulty": "Easy",
      "tags": ["Array", "Hash Map"],
      "solution": "function twoSum(nums, target) { /* Solution code here */ }",
      "example": "Input: nums = [2, 7, 11, 15], target = 9",
      "testCases": [
        { "input": "[2, 7, 11, 15], 9", "output": "[0, 1]" }
      ]
    },
    {
      "id": 2,
      "title": "Palindrome Number",
      "description": "Determine whether an integer is a palindrome.",
      "difficulty": "Easy",
      "tags": ["Math"],
      "solution": "function isPalindrome(x) { /* Solution code here */ }",
      "example": "Input: x = 121",
      "testCases": [
        { "input": "121", "output": "true" },
        { "input": "-121", "output": "false" }
      ]
    },
    {
      "id": 3,
      "title": "Roman to Integer",
      "description": "Convert a Roman numeral to an integer.",
      "difficulty": "Easy",
      "tags": ["String"],
      "solution": "function romanToInt(s) { /* Solution code here */ }",
      "example": "Input: 'III'",
      "testCases": [
        { "input": "'III'", "output": "3" }
      ]
    },
    {
      "id": 4,
      "title": "Longest Common Prefix",
      "description": "Find the longest common prefix string among an array of strings.",
      "difficulty": "Easy",
      "tags": ["String"],
      "solution": "function longestCommonPrefix(strs) { /* Solution code here */ }",
      "example": "Input: ['flower', 'flow', 'flight']",
      "testCases": [
        { "input": "['flower', 'flow', 'flight']", "output": "'fl'" }
      ]
    },
    {
      "id": 5,
      "title": "Valid Parentheses",
      "description": "Check if the input string is valid, where valid means every opening bracket has a corresponding closing bracket.",
      "difficulty": "Easy",
      "tags": ["Stack", "String"],
      "solution": "function isValid(s) { /* Solution code here */ }",
      "example": "Input: '()[]{}'",
      "testCases": [
        { "input": "'()[]{}'", "output": "true" }
      ]
    },
    {
      "id": 6,
      "title": "Remove Duplicates from Sorted Array",
      "description": "Remove duplicates in place and return the length of the unique elements.",
      "difficulty": "Easy",
      "tags": ["Array", "Two Pointers"],
      "solution": "function removeDuplicates(nums) { /* Solution code here */ }",
      "example": "Input: [1, 1, 2]",
      "testCases": [
        { "input": "[1, 1, 2]", "output": "2" }
      ]
    },
    {
      "id": 7,
      "title": "Merge Two Sorted Lists",
      "description": "Merge two sorted linked lists and return it as a sorted list.",
      "difficulty": "Easy",
      "tags": ["Linked List"],
      "solution": "function mergeTwoLists(l1, l2) { /* Solution code here */ }",
      "example": "Input: [1,2,4], [1,3,4]",
      "testCases": [
        { "input": "[1,2,4], [1,3,4]", "output": "[1,1,2,3,4,4]" }
      ]
    },
    {
      "id": 8,
      "title": "Implement strStr()",
      "description": "Return the index of the first occurrence of a substring within a string, or -1 if itâ€™s not found.",
      "difficulty": "Easy",
      "tags": ["String"],
      "solution": "function strStr(haystack, needle) { /* Solution code here */ }",
      "example": "Input: 'hello', 'll'",
      "testCases": [
        { "input": "'hello', 'll'", "output": "2" }
      ]
    },
    {
      "id": 9,
      "title": "Search Insert Position",
      "description": "Given a sorted array and a target value, return the index if the target is found.",
      "difficulty": "Easy",
      "tags": ["Array", "Binary Search"],
      "solution": "function searchInsert(nums, target) { /* Solution code here */ }",
      "example": "Input: [1,3,5,6], 5",
      "testCases": [
        { "input": "[1,3,5,6], 5", "output": "2" }
      ]
    },
    {
      "id": 10,
      "title": "Maximum Subarray",
      "description": "Find the contiguous subarray with the maximum sum.",
      "difficulty": "Medium",
      "tags": ["Array", "Dynamic Programming"],
      "solution": "function maxSubArray(nums) { /* Solution code here */ }",
      "example": "Input: [-2,1,-3,4,-1,2,1,-5,4]",
      "testCases": [
        { "input": "[-2,1,-3,4,-1,2,1,-5,4]", "output": "6" }
      ]
    },
    {
      "id": 11,
      "title": "Climbing Stairs",
      "description": "You are climbing a staircase with n steps. Each time you can take 1 or 2 steps.",
      "difficulty": "Easy",
      "tags": ["Dynamic Programming"],
      "solution": "function climbStairs(n) { /* Solution code here */ }",
      "example": "Input: 3",
      "testCases": [
        { "input": "3", "output": "3" }
      ]
    },
    {
      "id": 12,
      "title": "Valid Sudoku",
      "description": "Determine if a 9x9 Sudoku board is valid.",
      "difficulty": "Medium",
      "tags": ["Hash Map", "Array"],
      "solution": "function isValidSudoku(board) { /* Solution code here */ }",
      "example": "Input: board = [...]",
      "testCases": [
        { "input": "Valid board example", "output": "true" }
      ]
    },
    {
      "id": 13,
      "title": "Longest Palindromic Substring",
      "description": "Given a string, find the longest palindromic substring in it.",
      "difficulty": "Medium",
      "tags": ["String", "Dynamic Programming"],
      "solution": "function longestPalindrome(s) { /* Solution code here */ }",
      "example": "Input: 'babad'",
      "testCases": [
        { "input": "'babad'", "output": "'bab'" }
      ]
    },
    {
      "id": 14,
      "title": "Three Sum",
      "description": "Given an array, find all unique triplets that sum up to zero.",
      "difficulty": "Medium",
      "tags": ["Array", "Two Pointers"],
      "solution": "function threeSum(nums) { /* Solution code here */ }",
      "example": "Input: [-1,0,1,2,-1,-4]",
      "testCases": [
        { "input": "[-1,0,1,2,-1,-4]", "output": "[[-1,-1,2],[-1,0,1]]" }
      ]
    },
    {
      "id": 15,
      "title": "Set Matrix Zeroes",
      "description": "Given an m x n matrix, if an element is 0, set its row and column to 0.",
      "difficulty": "Medium",
      "tags": ["Matrix"],
      "solution": "function setZeroes(matrix) { /* Solution code here */ }",
      "example": "Input: matrix = [...]",
      "testCases": [
        { "input": "Matrix with zeros example", "output": "Matrix with affected rows and columns set to zero" }
      ]
    },
    {
      "id": 16,
      "title": "Valid Anagram",
      "description": "Check if two strings are anagrams of each other.",
      "difficulty": "Easy",
      "tags": ["String", "Hash Map"],
      "solution": "function isAnagram(s, t) { /* Solution code here */ }",
      "example": "Input: s = 'anagram', t = 'nagaram'",
      "testCases": [
        { "input": "'anagram', 'nagaram'", "output": "true" }
      ]
    },
    {
      "id": 17,
      "title": "Linked List Cycle",
      "description": "Check if a linked list has a cycle in it.",
      "difficulty": "Easy",
      "tags": ["Linked List", "Two Pointers"],
      "solution": "function hasCycle(head) { /* Solution code here */ }",
      "example": "Input: head with cycle",
      "testCases": [
        { "input": "head with cycle", "output": "true" }
      ]
    },
    {
      "id": 18,
      "title": "Binary Tree Inorder Traversal",
      "description": "Return the inorder traversal of a binary tree's nodes' values.",
      "difficulty": "Medium",
      "tags": ["Tree", "DFS"],
      "solution": "function inorderTraversal(root) { /* Solution code here */ }",
      "example": "Input: Tree root",
      "testCases": [
        { "input": "Tree with inorder sequence example", "output": "Inorder traversal result" }
      ]
    },
    {
      "id": 19,
      "title": "Reverse Linked List",
      "description": "Reverse a singly linked list.",
      "difficulty": "Easy",
      "tags": ["Linked List"],
      "solution": "function reverseList(head) { /* Solution code here */ }",
      "example": "Input: head = [1,2,3,4,5]",
      "testCases": [
        { "input": "[1,2,3,4,5]", "output": "[5,4,3,2,1]" }
      ]
    },
    {
      "id": 20,
      "title": "Maximum Depth of Binary Tree",
      "description": "Find the maximum depth of a binary tree.",
      "difficulty": "Easy",
      "tags": ["Tree", "DFS"],
      "solution": "function maxDepth(root) { /* Solution code here */ }",
      "example": "Input: Tree root",
      "testCases": [
        { "input": "Example binary tree", "output": "Maximum depth" }
      ]
    }
  ]
  